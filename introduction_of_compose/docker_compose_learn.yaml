version: "0.1.1v"
x-compose-cli:
  project_name: "docker compose learn"

services:
  frontend:
    image: example/webapp
    attach: true
    weight: 300
    weight_device:
      - path: /dev/sda
        weight: 400
    device_read_bps:
      - path: /dev/sdb
        rate: "12mb"
    device_read_iops:
      - path: /dev/sdb
        rate: 120
    device_write_bps:
      - path: /dev/sdb
        rate: "1024k"
    device_write_iops:
      - path: /dev/sdb
        rate: 30
    ports:
      - "443:8043"
    networks:
      - front-tier
      - back-tier
    configs:
      - httpd-config
    secrets:
      - server-certificate
    command: echo "This is our app ${COMPOSE_PROJECT_NAME}"

  backend:
    image: example/database
    volumes:
      - db-data:/etc/data
    networks:
      - back-tier
    depends_on:
      redis:
        condition: service_started
      db:
    credential_spec:
      config: my_credential_spec

  redis:
    image: redis:latest
    restart: true
    configs:
      - my_config
      - my_other_config
      - source: my_config
        target: /redis_config
        uid: "103"
        gid: "103"
        mode: 0440
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
      start_interval: 5s
    secrets:
      - my_secret
      - my_other_secret
      - source: my_secret
        target: redis_secret
        uid: "103"
        gid: "103"
        mode: 0440
    stop_grace_period: 1m30s
    tmpfs:
      - /run
      - /tmp

  web:
    image: nginx:alpine
    volumes:
      - type: volume
        source: mydata
        target: /data
        volume:
          nocopy: true
      - type: bind
        source: ./static
        target: /opt/app/static

  db:
    image: postgres:latest
    volumes:
      - "/var/run/postgres/postgres.sock:/var/run/postgres/postgres.sock"
      - "dbdata:/var/lib/postgresql/data"

secrets:
  my_secret:
    file: ./my_secret.txt
  my_other_secret:
    external: true
  server-certificate:
    external: true

volumes:
  db-data:
    driver: flocker
    driver_opts:
      size: "1GiB"
  mydata:

configs:
  httpd-config:
    external: true
  my_config:
    file: ./my_config.txt
  my_other_config:
    external: true
  credential_spec:
    my_credentials_spec:
    file: ./my-credential-spec.json|

networks:
  front-tier: {}
  back-tier: {}
